<beans:beans xmlns="http://www.springframework.org/schema/security"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/security
		http://www.springframework.org/schema/security/spring-security.xsd">

	<!-- <beans:bean id="authenticationEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint"> 
		构造函数中指定需要跳转的 URL <beans:constructor-arg value="/login" /> </beans:bean> -->
	<!-- enable use-expressions -->

	<http pattern="/static/**" security="none" />
	<http use-expressions="true">
		<!-- 当配置使用Spring Security的“匿名身份验证”过滤器时，ROLE_ANONYMOUS是分配给未经身份验证（匿名）用户的默认角色。 
			这是默认启用的。 -->
		<!-- 可以通过<intercept-url 来做权限控制也可以通过MySecurityMetadataSource。java来做控制 -->
		<!-- <intercept-url pattern="/login" access="hasRole('ROLE_ANONYMOUS')" 
			/> <intercept-url pattern="/list" access="hasRole('ROLE_ANONYMOUS')" /> <intercept-url 
			pattern="/test" access="hasRole('ROLE_ANONYMOUS')" /> <intercept-url pattern="/lxj/activity/add" 
			access="hasRole('ROLE_ANONYMOUS')" /> <intercept-url pattern="/lxj/activity/test" 
			access="hasRole('ROLE_ANONYMOUS')" /> -->
		<!-- <intercept-url pattern="/static/**" access="permitAll" /> -->
		<!-- <intercept-url pattern="/**" access="hasRole('ROLE_ANONYMOUS')" /> -->
		<!-- <intercept-url pattern="/admin**" access="hasRole('ROLE_ADMIN')" /> 
			<intercept-url pattern="/lxj/activity/list.do" access="hasRole('ROLE_ADMIN')" 
			/> -->
		<!-- As of Spring Security 4.0, CSRF protection is enabled by default with 
			XML configuration. If you would like to disable CSRF protection -->
		<!-- post请求需要带csrf,否则禁止访问 -->
		<!-- <csrf disabled="true" /> -->
		<intercept-url pattern="/login" access="hasRole('ROLE_ANONYMOUS')" />
		<intercept-url pattern="/logout" access="hasRole('ROLE_ANONYMOUS')" />
		<intercept-url pattern="/**" access="hasRole('ROLE_USER')" />
		<form-login login-page="/login" default-target-url="/welcome.jsp"
			authentication-failure-url="/login?error" username-parameter="username"
			password-parameter="password" />
		<form-login />
		<logout logout-success-url="/login?logout"/>
		<!-- 弹出一个对话框 -->
		<!-- <http-basic/> -->
		<!-- 单页面情况下暂时没找到方法带crsf到后端验证 -->
		<!-- 登录成功了,但是没权限就重置这个页面 -->
		<access-denied-handler error-page="/403" />
		<!-- 增加一个自定义filter，这个filter位于FILTER_SECURITY_INTERCEPTOR之前 ,这样就先执行自定义的过滤器,避免执行系统默认的过滤器 -->
		<!-- myFilter执行完之后会执行FILTER_SECURITY_INTERCEPTOR,所以xml配置的权限默认不拦截 -->
		<custom-filter ref="myFilter" before="FILTER_SECURITY_INTERCEPTOR" />
		<headers>
			<frame-options policy="SAMEORIGIN" />
		</headers>
	</http>
	<!-- 自定义过滤器 -->
	<beans:bean id="myFilter"
		class="fightingman.filter.MyFilterSecurityInterceptor">
		<beans:property name="authenticationManager" ref="authenticationManager" />
		<beans:property name="accessDecisionManager" ref="myAccessDecisionManager" />
		<beans:property name="securityMetadataSource" ref="mySecurityMetadataSource" />
	</beans:bean>

	<!-- 自定义资源数据，定义访问的资源属于哪些权限 -->
	<beans:bean id="mySecurityMetadataSource" class="fightingman.filter.MySecurityMetadataSource">
	</beans:bean>

	<!-- 自定义决策器，最终决定该角色是否有权限访问该资源 -->
	<beans:bean id="myAccessDecisionManager" class="fightingman.filter.MyAccessDecisionManager" />

	<!-- Select users and user_roles from database -->
	<!-- <authentication-manager> <authentication-provider> <jdbc-user-service 
		data-source-ref="dataSource" users-by-username-query="select username,password 
		from users where username=?" authorities-by-username-query="select username, 
		role from user_roles where username =?" /> </authentication-provider> </authentication-manager> -->
	<!-- 配置 -->
	<!-- <authentication-manager> <authentication-provider> <user-service> <user 
		name="test" password="test" authorities="ROLE_USER, ROLE_ADMIN" /> <user 
		name="test1" password="test1" authorities="ROLE_USER" /> </user-service> 
		</authentication-provider> </authentication-manager> -->
	<beans:bean name="md5PasswordEncoder"
		class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" />
	<authentication-manager alias="authenticationManager">
		<authentication-provider user-service-ref="customUserDetailsService">
			<password-encoder ref="md5PasswordEncoder" />
		</authentication-provider>
	</authentication-manager>
</beans:beans>